/*-------------------------------------------------------------------------
    String+Char.swift -- String/Character extensions
    Compiler Generator Coco/R
    Copyright (c) by Michael Griebling

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

import Foundation

public extension String {
	
	// Extensions to make it easier to work with C-style strings
	
	public subscript (n: Int) -> Character {
		get {
			let s = self.characters.index(self.startIndex, offsetBy: n)
			if s < self.endIndex {
				return self[s]
			}
			return "\0"
		}
		set {
			let s = self.characters.index(self.startIndex, offsetBy: n)
			if s < self.endIndex {
				self = self.substring(to: s) + "\(newValue)" + self.substring(from: self.index(after: s))
			}
		}
	}
	
	public func count() -> Int { return self.characters.count }
	
	public func stringByTrimmingTrailingCharactersInSet (_ characterSet: CharacterSet) -> String {
		if let rangeOfLastWantedCharacter = self.rangeOfCharacter(from: characterSet.inverted, options:.backwards) {
			return self.substring(to: rangeOfLastWantedCharacter.upperBound)
		}
		return ""
	}
    
    public func substring (_ from: Int, _ length: Int) -> String {
        let str : NSString = self as NSString
        return str.substring(with: NSMakeRange(from, length))
    }
    
    public func contains (_ s: String) -> Bool {
        let str : NSString = self as NSString
        return str.contains(s)
    }
    
    public func Trim() -> String {
        return self.trimmingCharacters(in: CharacterSet.whitespaces)
    }
	
}

public extension Character {

	public func unicodeValue() -> Int {
		for s in String(self).unicodeScalars {
			return Int(s.value)
		}
		return 0
	}
    
    public func isLetter() -> Bool {
        let cSet = CharacterSet.letters
        return cSet.contains(UnicodeScalar(self.toUnichar())!)
    }
    
    public func isAlphanumeric() -> Bool {
        let cSet = CharacterSet.alphanumerics
        return cSet.contains(UnicodeScalar(self.toUnichar())!)
    }
    
    public var lowercase : Character {
        let s = String(self)
        return s.lowercased().characters.first!
    }
    
    public var uppercase : Character {
        let s = String(self)
        return s.uppercased().characters.first!
    }
	
	init(_ int: Int) {
		let s = String(describing: UnicodeScalar(int))
		self = s[0]
	}
	
	public func add (_ n: Int) -> Character {
		let newCharacter = self.unicodeValue() + n
		return Character(newCharacter)
	}
	
	public func toUnichar () -> unichar {
		// Caution: this won't work for multi-char Characters
		return [unichar](String(self).utf16).first!
	}
	
}

func == (l: Int, r: Character) -> Bool { return l == r.unicodeValue() }
func == (l: Character, r: Int) -> Bool { return r == l }
func != (l: Int, r: Character) -> Bool { return l != r.unicodeValue() }
func != (l: Character, r: Int) -> Bool { return r != l }
func + (c: Character, inc: Int) -> Character { return c.add(inc) }
func - (c: Character, inc: Int) -> Character { return c.add(-inc) }
func - (c: Character, inc: Character) -> Int { return c.add(-inc.unicodeValue()).unicodeValue() }
func += (c: inout Character, inc: Int) { c = c + inc }
func -= (c: inout Character, inc: Int) { c = c - inc }
postfix func -- (c: Character) -> Character { return c - 1 }
postfix func ++ (c: Character) -> Character { return c + 1 }
